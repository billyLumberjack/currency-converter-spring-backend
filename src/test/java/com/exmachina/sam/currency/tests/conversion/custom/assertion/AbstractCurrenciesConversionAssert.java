package com.exmachina.sam.currency.tests.conversion.custom.assertion;

import com.exmachina.sam.currency.conversion.CurrenciesConversion;
import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link CurrenciesConversion} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractCurrenciesConversionAssert<S extends AbstractCurrenciesConversionAssert<S, A>, A extends CurrenciesConversion> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractCurrenciesConversionAssert}</code> to make assertions on actual CurrenciesConversion.
   * @param actual the CurrenciesConversion we want to make assertions on.
   */
  protected AbstractCurrenciesConversionAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual CurrenciesConversion's destinationAmount is equal to the given one.
   * @param destinationAmount the given destinationAmount to compare the actual CurrenciesConversion's destinationAmount to.
   * @return this assertion object.
   * @throws AssertionError - if the actual CurrenciesConversion's destinationAmount is not equal to the given one.
   */
  public S hasDestinationAmount(java.math.BigDecimal destinationAmount) {
    // check that actual CurrenciesConversion we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting destinationAmount of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.math.BigDecimal actualDestinationAmount = actual.getDestinationAmount();
    if (!Objects.areEqual(actualDestinationAmount, destinationAmount)) {
      failWithMessage(assertjErrorMessage, actual, destinationAmount, actualDestinationAmount);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual CurrenciesConversion's sourceAmount is equal to the given one.
   * @param sourceAmount the given sourceAmount to compare the actual CurrenciesConversion's sourceAmount to.
   * @return this assertion object.
   * @throws AssertionError - if the actual CurrenciesConversion's sourceAmount is not equal to the given one.
   */
  public S hasSourceAmount(java.math.BigDecimal sourceAmount) {
    // check that actual CurrenciesConversion we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting sourceAmount of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.math.BigDecimal actualSourceAmount = actual.getSourceAmount();
    if (!Objects.areEqual(actualSourceAmount, sourceAmount)) {
      failWithMessage(assertjErrorMessage, actual, sourceAmount, actualSourceAmount);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual CurrenciesConversion's usedRate is equal to the given one.
   * @param usedRate the given usedRate to compare the actual CurrenciesConversion's usedRate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual CurrenciesConversion's usedRate is not equal to the given one.
   */
  public S hasUsedRate(com.exmachina.sam.currency.rates.Rate usedRate) {
    // check that actual CurrenciesConversion we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting usedRate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    com.exmachina.sam.currency.rates.Rate actualUsedRate = actual.getUsedRate();
    if (!Objects.areEqual(actualUsedRate, usedRate)) {
      failWithMessage(assertjErrorMessage, actual, usedRate, actualUsedRate);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
